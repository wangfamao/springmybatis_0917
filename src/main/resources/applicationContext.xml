<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
		http://www.springframework.org/schema/context   
		http://www.springframework.org/schema/context/spring-context-4.0.xsd   
		http://www.springframework.org/schema/tx   
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
		<!-- 指定扫描组件包 -->
		<context:component-scan base-package="com.entor"/>
		<!-- 配置数据源 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8" />
			<property name="username" value="root" />
			<property name="password" value="admin" />
		</bean>
		<!-- 配置SqlSessionFactory会话工厂 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource"/>
			<!-- 类别名，该包下面的所有类以类名作为别名 -->
			<property name="typeAliasesPackage" value="com.entor.entity"/>
			<!-- orm映射文件，指定包以及子包下的所有xml文件 -->
			<property name="mapperLocations" value="classpath:com/entor/mapper/**/*.xml"/>
		</bean>
		<!-- 
			为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 编写数据访问对象 (DAO)的代码,
			MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean。这个类 可以让你直接注入数据映射器接口到你的 service 层 bean 中。
			当使用映射器时,你仅仅如调 用你的 DAO 一样调用它们就可以了,但是你不需要编写任何 DAO 实现的代码,因为 MyBatis-Spring 将会为你创建代理。
		-->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 扫描接口所在的包 -->
		    <property name="basePackage" value="com.entor.dao"/>
		    <!-- 这个属性一般都用不到，只有当你配置多数据源的时候，这是会有多个sqlSessionFactory，你就需要通过该属性来指定哪一个sqlSessionFactory（值为SqlSessionFactoryBean <bean>配置中的id属性）。 -->
		    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		</bean>
		<!-- 配置事务管理器 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/>
		</bean>
		<!-- 配置通知和事务关系 -->
		<tx:advice id="advice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="add*" propagation="REQUIRED"/>
				<tx:method name="save*" propagation="REQUIRED"/>
				<tx:method name="update*" propagation="REQUIRED"/>
				<tx:method name="edit*" propagation="REQUIRED"/>
				<tx:method name="modify*" propagation="REQUIRED"/>
				<tx:method name="del*" propagation="REQUIRED"/>
				<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		<!-- 配置aop切面 -->
		<aop:config>
			<aop:pointcut expression="execution(* com.entor.service.impl.*.*(..))" id="pointcut"/>
			<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
		</aop:config>
		
</beans>